{"version":3,"sources":["webpack:///./node_modules/@capacitor-community/sqlite/dist/esm/web.js"],"names":["CapacitorSQLiteWeb","super","this","sqliteEl","isStoreOpen","document","querySelector","addEventListener","event","notifyListeners","detail","console","log","options","echo","unimplemented","Promise","reject","createConnection","err","open","closeConnection","ret","checkConnectionsConsistency","resolve","close","execute","executeSet","run","query","isDBExists","isDBOpen","isDatabase","isTableExists","deleteDatabase","isJsonValid","importFromJson","exportToJson","createSyncTable","setSyncDate","getSyncDate","addUpgradeStatement","copyFromAssets","getDatabaseList"],"mappings":"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","file":"js/chunk-2d238444.609e6034.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.sqliteEl = null;\n        this.isStoreOpen = false;\n        this.sqliteEl = document.querySelector('jeep-sqlite');\n        if (this.sqliteEl != null) {\n            this.sqliteEl.addEventListener('jeepSqliteImportProgress', (event) => {\n                this.notifyListeners('sqliteImportProgressEvent', event.detail);\n            });\n            this.sqliteEl.addEventListener('jeepSqliteExportProgress', (event) => {\n                this.notifyListeners('sqliteExportProgressEvent', event.detail);\n            });\n        }\n        else {\n            console.log(`$$$$$$ this.sqliteEl is null $$$$$$`);\n        }\n    }\n    async echo(options) {\n        if (this.sqliteEl != null) {\n            const echo = await this.sqliteEl.echo(options);\n            return echo;\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isSecretStored() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async setEncryptionSecret(options) {\n        console.log('setEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async changeEncryptionSecret(options) {\n        console.log('changeEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async createConnection(options) {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.createConnection(options);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async open(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.open(options);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async closeConnection(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.closeConnection(options);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async checkConnectionsConsistency(options) {\n        if (this.sqliteEl != null) {\n            try {\n                const ret = await this.sqliteEl.checkConnectionsConsistency(options);\n                return Promise.resolve(ret);\n            }\n            catch (err) {\n                return Promise.reject(`${err}`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async close(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.close(options);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async execute(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.execute(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async executeSet(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.executeSet(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async run(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.run(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async query(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.query(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isDBExists(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isDBExists(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isDBOpen(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isDBOpen(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isDatabase(options) {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isDatabase(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isTableExists(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isTableExists(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async deleteDatabase(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.deleteDatabase(options);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async isJsonValid(options) {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.isJsonValid(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async importFromJson(options) {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.importFromJson(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async exportToJson(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.exportToJson(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async createSyncTable(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.createSyncTable(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async setSyncDate(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.setSyncDate(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async getSyncDate(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.getSyncDate(options);\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async addUpgradeStatement(options) {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.addUpgradeStatement(options);\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async copyFromAssets() {\n        if (this.sqliteEl != null) {\n            if (this.isStoreOpen) {\n                try {\n                    await this.sqliteEl.copyFromAssets();\n                    return Promise.resolve();\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async getDatabaseList() {\n        if (this.sqliteEl != null) {\n            if (!this.isStoreOpen)\n                this.isStoreOpen = await this.sqliteEl.isStoreOpen();\n            if (this.isStoreOpen) {\n                try {\n                    const ret = await this.sqliteEl.getDatabaseList();\n                    return Promise.resolve(ret);\n                }\n                catch (err) {\n                    return Promise.reject(`${err}`);\n                }\n            }\n            else {\n                return Promise.reject(`Store \"jeepSqliteStore\" failed to open`);\n            }\n        }\n        else {\n            throw this.unimplemented('Not implemented on web.');\n        }\n    }\n    async addSQLiteSuffix(options) {\n        console.log('addSQLiteSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async deleteOldDatabases(options) {\n        console.log('deleteOldDatabases', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}